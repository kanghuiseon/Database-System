#ifndef __BPT_H__
#define __BPT_H__

// Uncomment the line below if you are compiling on Windows.
// #define WINDOWS
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef WINDOWS
#define bool char
#define false 0
#define true 1
#endif

// Default order is 4.
#define DEFAULT_ORDER 4

// Minimum order is necessarily 3.  We set the maximum
// order arbitrarily.  You may change the maximum order.
#define MIN_ORDER 3
#define MAX_LEAF 32
#define MAX_INTERNAL 248
#define uint64_t pagenum_t;
// Disk_based
typedef struct record {
    int64_t key;
    char values[120];
} record;

typedef struct page_t{
    off_t parent_page_offset;
    off_t sibling_page_offset;
    record records[31];
    char reserved[104];
    int is_Leaf;
    int num_keys;
}page;

typedef struct internal_record{
    int64_t key;
    off_t page_offset;
};

typedef struct Header_page {
    off_t free_page;
    off_t root_page;
    int64_t num_of_pages;
    char reserved[4072];
}header;

extern int fd;
extern header* header;
extern page* page;

// FUNCTION PROTOTYPES.

// Output and utility.
int height( off_t root );
//find leaf
off_t find_leaf(int64_t key);
int cut( int length );
int db_find(int64_t key, char* ret_val);

// Insertion.
int open_table(char *pathname);
int db_insert(int64_t key, char* value);
record * make_record(int64_t key, char* value);
off_t make_page( void );
off_t make_leaf( void );
int get_left_index(off_t parent, off_t left);
off_t insert_into_leaf( off_t leaf, int key, record * pointer );
off_t insert_into_leaf_after_splitting(off_t root, off_t leaf, int key,
                                        record * pointer);
off_t insert_into_page(off_t root, node * parent,
                       int left_index, int key, off_t right);
off_t insert_into_page_after_splitting(off_t root, off_t parent,
                                        int left_index,
        int key, off_t right);
off_t insert_into_parent_page(off_t root, off_t left, int key,
        off_t right);
off_t insert_into_new_root_page(off_t left, int key, off_t right);
off_t start_new_tree(int key, record * pointer);

// Deletion.
int db_delete(int64_t key);
int get_neighbor_index(off_t n );
off_t adjust_root(off_t root);
off_t coalesce_pages(off_t root, off_t n, off_t neighbor,
                      int neighbor_index, int k_prime);
off_t redistribute_pages(off_t root, off_t n, off_t neighbor,
                          int neighbor_index,
        int k_prime_index, int k_prime);
off_t delete_entry( off_t root, off_t n, int key, void * pointer );

#endif /* __BPT_H__*/

